var jModel = new sap.ui.model.json.JSONModel();
var result = {},
	Pernr = "",
	Mid = "",
	midSelect = "",
	i18nModel = i18nModel;
sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/Fragment",
	"jquery.sap.global",
	"sap/m/MessageToast",
	"sap/ui/model/Filter",
	"sap/ui/model/odata/v2/ODataModel",
	"OTApp/utils/Validator",
	"sap/m/MessageBox",
	"sap/m/Button",
	"sap/m/Dialog",
	"sap/m/List",
	"sap/m/StandardListItem"
], function(Controller, JSONModel, Fragment, Filter, MessageToast, ODataModel, jQuery, Validator, MessageBox, Button, Dialog, List,
	StandardListItem) {
	"use strict";

	var url = "/sap/opu/odata/sap/ZHCM_OTAPP_SRV";
	var oModel = new sap.ui.model.odata.ODataModel(url, true);
	var me = this;

	// resultEmpDet = [],
	// 	OTDet = [];

	return Controller.extend("OTApp.controller.ChangeOT", {

		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf OTApp.view.ChangeOT
		 */
		onInit: function() {
			this.getView().setModel(oModel);
			oModel.read("/Employee_f4Set", {
				success: function(oData, oResponse) {
					result.Employee_f4Set = oData.results;
					jModel.setData(result);
				},
				error: function(oError) {
					MessageToast.show(i18nModel.getProperty("Oderr"));
				}
			});
			sap.ui.getCore().attachValidationError(function(oEvent) {
				oEvent.getParameter("docno").setValueState(sap.ui.core.ValueState.Error);
			});
			sap.ui.getCore().attachValidationSuccess(function(oEvent) {
				oEvent.getParameter("docno").setValueState(sap.ui.core.ValueState.None);
			});
			me = this;

			// get the data from the Disp Controller
			var eventBus = sap.ui.getCore().getEventBus();

			// 1. ChannelName, 2. EventName, 3. Function to be executed, 4. Listener
			eventBus.subscribe("MainDetailChannel", "onNavigateEvent", this.onDataReceived, this);
		},
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		// onBeforeRendering: function() {

		// },
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		//	onAfterRendering: function() {
		//
		//	},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		onDataReceived: function(channel, event, data) {
			// do something with the data (bind to model)
			result.EmpDet = data.EmpDet;
			result.OTDet = data.OTDet;

			jModel.setData(result);
			this.getView().setModel(jModel);
		},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		onExit: function() {
			if (this._oDialog) {
				this._oDialog.destroy();
			}
			if (this._oPopover) {
				this._oPopover.destroy();
			}
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		getRouter: function() {
			return sap.ui.core.UIComponent.getRouterFor(this);
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		onBackBtnChange: function() {
			//This code was generated by the layout editor.
			this.getRouter().getTargets().display("display");
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		onCancelBtnChange: function() {
			//This code was generated by the layout editor.
			this.getRouter().getTargets().display("display");
		},

		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		onDocChange: function() {
			//This code was generated by the layout editor.
			if (this.getView().byId("docno").getValue() === "") {
				this.getView().byId("docno").setValueState(sap.ui.core.ValueState.Error); // if the field is empty after change, it will go red
			} else {
				this.getView().byId("docno").setValueState(sap.ui.core.ValueState.None); // if the field is not empty after change, the value state (if any) is removed
			}
		},
		onDocdtChange: function() {
			//This code was generated by the layout editor.
			if (this.getView().byId("docdt").getValue() === "") {
				this.getView().byId("docdt").setValueState(sap.ui.core.ValueState.Error); // if the field is empty after change, it will go red
			} else {
				this.getView().byId("docdt").setValueState(sap.ui.core.ValueState.None); // if the field is not empty after change, the value state (if any) is removed
			}
		},
		checkOT: function(oEvent) {
			// This code was generated by the layout editor.
			if (oEvent.getSource().getValue() > 24) {
				oEvent.getSource().setValueState(sap.ui.core.ValueState.Error); // if the field is empty after change, it will go red
			} else {
				oEvent.getSource().setValueState(sap.ui.core.ValueState.None); // if the field is not empty after change, the value state (if any) is removed
			}
		},

		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		deleteItem: function(oEvent) {
			//This code was generated by the layout editor.
			var tbl = oEvent.getSource().getParent().getParent();
			var path = oEvent.getParameter("listItem").getBindingContext().getPath();
			var index = parseInt(path.substring(path.lastIndexOf("/") + 1), 10);
			var model = tbl.getModel();
			if (result.AllDates !== undefined) {
				for (var j = result.AllDates.length - 1; j >= 0; j--) {
					if (result.AllDates[j].MilNo === result.Employee_dataSet[index].Mid) {
						result.AllDates.splice(j, 1);
					}
				}
			}
			if (result.TempDates !== undefined) {
				result.TempDates = [];
			}

			if (result.DocDetailsSet !== undefined) {
				result.DocDetailsSet = [];
			}

			var data = model.getProperty("/Employee_dataSet");
			data.splice(index, 1);
			model.setProperty("/Employee_dataSet", data);
		},

		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		addDates: function(oEvent) {
			//This code was generated by the layout editor.
			if (!this._oPopover) {
				this._oPopover = sap.ui.xmlfragment("OTApp.view.Popover", this);
				this.getView().addDependent(this._oPopover);
			}
			midSelect = oEvent.getSource().data("Mid");
			if (result.AllDates === undefined) {
				result.AllDates = [];
				result.TempDates = [];
			}
			if (result.AllDates.length > 0) {
				var OTemp = $(result.AllDates).filter(function(i, n) {
					return n.MilNo === midSelect;
				});
				var cal = sap.ui.getCore().byId("calendar");
				sap.ui.getCore().byId("calendar").removeAllSelectedDates();
				if (OTemp && OTemp.length > 0) {
					result.TempDates = [];
					sap.ui.getCore().byId("calendar").removeAllSelectedDates();
					for (var i = 0; i < OTemp.length; i++) {
						result.TempDates.push(OTemp[i]);
						var dr = new sap.ui.unified.DateTypeRange({
							startDate: OTemp[i].Dates
						});
						cal.addSelectedDate(dr);
					}
				} else {
					result.TempDates = [];
				}
			} else {
				result.TempDates = [];
			}
			jModel.setData(result);
			this.getView().setModel(jModel);
			this._oPopover.openBy(oEvent.getSource());
		},
		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		handleCalendarSelect: function(oEvent) {
			var aSelectedDates = oEvent.getSource().getSelectedDates();
			var tmp = [],
				list = [],
				OTemp = [];

			if (aSelectedDates && aSelectedDates.length > 0) {
				tmp = result.TempDates;
				result.TempDates = [];
				for (var i = 0; i < aSelectedDates.length; i++) {
					var seldt = aSelectedDates[i].getStartDate();
					if (tmp && tmp.length !== 0) {
						OTemp = $(tmp).filter(function(i, n) {
							return n.Dates === seldt;
						});
						if (OTemp && OTemp.length !== 0) {
							list = {
								"MilNo": midSelect,
								"Dates": seldt,
								"Hrs": OTemp[0].Hrs
							};
						} else {
							list = {
								"MilNo": midSelect,
								"Dates": seldt,
								"Hrs": ""
							};
						}
					} else {
						list = {
							"MilNo": midSelect,
							"Dates": seldt,
							"Hrs": ""
						};
					}
					result.TempDates.push(list);
				}
			} else {
				result.TempDates = [];
			}
			jModel.setData(result);
			this.getView().setModel(jModel);
		},
		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		handleCloseButton: function(oEvent) {
			var status = 0;
			for (var k = 0; k < result.TempDates.length; k++) {
				if (result.TempDates[k].Hrs > 24) {
					status = 1;
				}
			}
			if (status === 0) {
				if (result.TempDates.length > 0) {
					var OTemp = $(result.TempDates).filter(function(i, n) {
						return n.MilNo === midSelect;
					});
					for (var j = result.AllDates.length - 1; j >= 0; j--) {
						if (result.AllDates[j].MilNo === midSelect) {
							result.AllDates.splice(j, 1);
						}
					}
					for (var i = 0; i < OTemp.length; i++) {
						result.AllDates.push(OTemp[i]);
					}
					result.TempDates = [];
					sap.ui.getCore().byId("calendar").removeAllSelectedDates();
					jModel.setData(result);
					this.getView().setModel(jModel);
				}
				this._oPopover.close();
			} else {
				MessageToast.show(i18nModel.getProperty("chkOTHrs"));
			}
			// this._oPopover.destroy();
		},
		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		handleRemoveSelection: function(oEvent) {
			result.TempDates = [];
			for (var j = result.AllDates.length - 1; j >= 0; j--) {
				if (result.AllDates[j].MilNo === midSelect) {
					result.AllDates.splice(j, 1);
				}
			}
			sap.ui.getCore().byId("calendar").removeAllSelectedDates();
			jModel.setData(result);
			this.getView().setModel(jModel);
		},
		/**
		 *@memberOf OTApp.controller.CreateOT
		 */
		onRefreshBtn: function() {
			//This code was generated by the layout editor.
			var docno = this.getView().byId("docno").getValue();
			var docdt = this.getView().byId("docdt").getDateValue();
			var dateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
				pattern: "yyyy-MM-ddTKK:mm:ss"
			});

			if (docdt && docdt.length !== 0) {
				docdt = dateFormat.format(docdt);
			}

			if (docno === "") {
				MessageToast.show(i18nModel.getProperty("DocnEmpt"));
			} else if (docdt === "" || docdt === null) {
				MessageToast.show(i18nModel.getProperty("DocdtEmpt"));
			} else if (result.Employee_dataSet === undefined || result.Employee_dataSet.length === 0) {
				MessageToast.show(i18nModel.getProperty("EmpEmpt"));
			} else if (result.AllDates === undefined || result.AllDates.length === 0) {
				MessageToast.show(i18nModel.getProperty("OtEmpt"));
			} else {
				var emp = [];
				for (var i = 0; i < result.Employee_dataSet.length; i++) {
					emp.push({
						Docdate: result.Employee_dataSet[i].Docdate,
						Docno: result.Employee_dataSet[i].Docno,
						Empgrp: result.Employee_dataSet[i].Empgrp,
						EmpgrpTxt: result.Employee_dataSet[i].EmpgrpTxt,
						Empsubgrp: result.Employee_dataSet[i].Empsubgrp,
						EmpsubgrpTxt: result.Employee_dataSet[i].EmpsubgrpTxt,
						Ename: result.Employee_dataSet[i].Ename,
						Endda: result.Employee_dataSet[i].Endda,
						Mid: result.Employee_dataSet[i].Mid,
						Orgtx: result.Employee_dataSet[i].Orgtx,
						Orgunit: result.Employee_dataSet[i].Orgunit,
						Orgtx2: result.Employee_dataSet[i].Orgtx2,
						Orgunit2: result.Employee_dataSet[i].Orgunit2,
						Otamt: result.Employee_dataSet[i].Otamt,
						Pernr: result.Employee_dataSet[i].Pernr,
						Plstx: result.Employee_dataSet[i].Plstx,
						Posn: result.Employee_dataSet[i].Posn
					});
				}

				var ot = [];
				for (i = 0; i < result.AllDates.length; i++) {
					if (result.AllDates[i].Hrs === "") {
						ot.push({
							MilNo: result.AllDates[i].MilNo,
							Dates: dateFormat.format(result.AllDates[i].Dates),
							Hrs: "0"
						});
					} else {
						ot.push({
							MilNo: result.AllDates[i].MilNo,
							Dates: dateFormat.format(result.AllDates[i].Dates),
							Hrs: result.AllDates[i].Hrs
						});
					}
				}

				var data = {
					"Flag": "",
					"Docno": docno,
					"Docdate": docdt,
					"EmpSet": emp,
					"OtdetailsSet": ot
				};

				// oModel.create("/DocDetailsSet", data, {
				// 	success: function(oData, oResponse) {
				// 		result.DocDetailsSet = oResponse.data;
				// 		result.Employee_dataSet = result.DocDetailsSet.EmpSet.results;
				// 		result.OtdetailsSet = result.DocDetailsSet.OtdetailsSet.results;
				// 		jModel.setData(result);
				// 	},
				// 	error: function(oError) {
				// 		MessageToast.show(i18nModel.getProperty("Oderr"));
				// 	}
				// });
			}
		},

		pressDialog: null

	});

});