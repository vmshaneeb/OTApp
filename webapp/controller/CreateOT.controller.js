sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/Fragment",
	"jquery.sap.global",
	"sap/m/MessageToast",
	"sap/ui/model/Filter",
	"sap/ui/model/odata/ODataModel"
	// " sap/ui/model/odata/v2/ODataModel"
], function(Controller, JSONModel, Fragment, Filter, MessageToast, ODataModel, jQuery) {
	"use strict";

	var url = "/sap/opu/odata/sap/ZHCM_OTAPP_SRV"; //proxy/http/172.16.76.134:50000
	var oModel = new sap.ui.model.odata.ODataModel(url, true);
	// var oModel = new sap.ui.model.odata.v2.ODataModel(url, true);
	// var oModel = new ODataModel(url, true);
	var jModel = new JSONModel();

	var result = {},
		Pernr = "",
		Mid = "";

	return Controller.extend("OTApp.controller.CreateOT", {
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		onInit: function() {
			// oModel.setDefaultBindingMode("TwoWay");
			this.getView().setModel(oModel);

			oModel.read("/Employee_f4Set", null, null, false, function(oData, oResponse) {
				result.Employee_f4Set = oData.results;
				jModel.setData(result);
			});
		},
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		//	onBeforeRendering: function() {
		//
		//	},
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		//	onAfterRendering: function() {
		//
		//	},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf OTApp.view.view.ChangeOT
		 */
		onExit: function() {
			if (this._oDialog) {
				this._oDialog.destroy();
			}
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		getRouter: function() {
			return sap.ui.core.UIComponent.getRouterFor(this);
		},
		onBackBtnChange: function() {
			//This code was generated by the layout editor.
			this.getRouter().getTargets().display("display");
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		onCancelBtnChange: function() {
			//This code was generated by the layout editor.
			this.getRouter().getTargets().display("display");
		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		addItem: function(oEvent) {

			if (!this._oDialog) {
				this._oDialog = sap.ui.xmlfragment("OTApp.view.User", this);
				// this._oDialog.setModel(this.getView().getModel());
				this._oDialog.setModel(jModel);
			}

			// Multi-select if required
			var bMultiSelect = !!oEvent.getSource().data("multi");
			this._oDialog.setMultiSelect(bMultiSelect);

			// Remember selections if required
			var bRemember = !!oEvent.getSource().data("remember");
			this._oDialog.setRememberSelections(bRemember);

			// clear the old search filter
			this._oDialog.getBinding("items").filter([]);

			// toggle compact style
			// jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this._oDialog);
			this._oDialog.open();

		},
		/**
		 *@memberOf OTApp.controller.ChangeOT
		 */
		deleteItem: function(evt) {
			//This code was generated by the layout editor.
			// jQuery.sap.log.info("delete pressed");
			var path = evt.getParameter('listItem').getBindingContext().getPath();
			var index = parseInt(path.substring(path.lastIndexOf('/') + 1), 10); //any other value than hex and oct, the radix is 10 (decimal)
			var model = this.getView().getModel();
			var data = model.getData();

			data.splice(index, 1);
			model.setData(data);

			// refresh the model
			oModel.refresh();

		},

		_handleValueHelpSearch: function(evt) {
			var sValue = evt.getParameter("value");
			var oFilter = new sap.ui.model.Filter(
				"Mid",
				sap.ui.model.FilterOperator.Contains, sValue
			);
			var oFilter1 = new sap.ui.model.Filter(
				"Uname",
				sap.ui.model.FilterOperator.Contains, sValue
			);
			var oFilter2 = new sap.ui.model.Filter(
				"Pernr",
				sap.ui.model.FilterOperator.Contains, sValue
			);
			var allfilter = new sap.ui.model.Filter([oFilter, oFilter1, oFilter2], false);
			evt.getSource().getBinding("items").filter(allfilter);
		},

		_handleValueHelpClose: function(evt) {
			var oSelectedItem = evt.getParameter("selectedItem");

			if (oSelectedItem) {

				// var productInput = this.getView().byId("idAddRow");
				// productInput.setValue(oSelectedItem.getTitle());
				// Pernr = this.getView().byId("idAddRow").getValue();
				// this.setData();
				// var Context = oSelectedItem.getBindingContext();
				// Mid = Context.getProperty("Mid");
				// var Endda = Context.getProperty("Endda");
				// var flag = true;
				// if (Endda === null) {
				// 	this.getView().byId("idSubmit").setVisible(false);
				// 	this.getView().byId("idNew").setVisible(false);
				// 	flag = false;
				// 	this.handleCreateNew(flag);
				// } else {
				// 	this.handleCreateNew(flag);
				// 	this.getView().byId("idSubmit").setVisible(true);
				// 	this.getView().byId("idNew").setVisible(true);
				// }

			}
			evt.getSource().getBinding("items").filter([]);
		}

	});
});